# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
trigger: none
pr:
  - main

pool:
  vmImage: ubuntu-latest



stages:
  - stage: checkov
    jobs:
        - job: compliance
          displayName: 'Run checkov for compliance'
          pool:
            vmImage: 'ubuntu-latest'

          steps:
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: 'pip3 install checkov'
            - task: Bash@3
              displayName: 'Checkov Static Code Analysis'
              inputs:
                targetType: 'inline'
                #script: checkov --directory ./  --check HIGH --bc-api-key  $(API-2)
                script: checkov --directory ./  --check HIGH --bc-api-key  $(API-2) --skip-check CKV2_AZURE_1 
  - stage: cost_estimation
    dependsOn: checkov
    jobs:
        - job: 
          displayName: 'infracost'
          pool:
            vmImage: 'ubuntu-latest'

          steps:
            - task: InfracostSetup@1
              inputs:
                apiKey: $(api_key)
                version: '0.10.x'

            - bash: |
                branch=$(System.PullRequest.TargetBranch)
                branch=main
                git clone https://github.com/Swathi-Vijai/infra-checkov-poc.git --branch=${branch} /tmp/base
              displayName: Checkout base branch

            - bash: |
                infracost breakdown --path="." \
                                      --format=json \
                                      --out-file=/tmp/infracost-base.json 
              displayName: Generate Infracost cost estimate baseline
            
            - bash: |
                infracost diff --path=$(TF_ROOT) \
                         --format=json \
                         --compare-to=/tmp/infracost-base.json \
                         --out-file=/tmp/infracost.json
              displayName: Generate Infracost diff
            
            - bash: |
                infracost comment github --path=/tmp/infracost.json \
                                  --repo=$(Build.Repository.Name) \
                                  --pull-request=$(System.PullRequest.PullRequestNumber) \
                                  --github-token=$(GITHUB-TOKEN) \
                                  --behavior=update
              displayName: Post Infracost comment

            - task: PublishBuildArtifacts@1
              inputs:
                pathtoPublish: /tmp/infracost-base.json
                artifactName: infracost-base-json

  
  
  - stage: deploy
    dependsOn: cost_estimation
    jobs:
      - deployment: Deploy
        variables:
        - group: Terraform-ic
       
        
        
        environment: dev
        strategy:
            runOnce:
                deploy:
                   steps:
                    - checkout: self
                    
                    - task: FileTransform@1
                      inputs:
                          folderPath: '$(System.DefaultWorkingDirectory)'
                          fileType: 'json'
                          targetFiles: 'parameter.json'
                    - task: TerraformInstaller@0
                      inputs:
                              terraformVersion: 'latest'
                    - task: TerraformTaskV3@3
                      inputs:
                              provider: 'azurerm'
                              command: 'init'
                              backendServiceArm: 'az-asgmts'
                              backendAzureRmResourceGroupName: 'Devops-RG'
                              backendAzureRmStorageAccountName: 'devopstrainingstorage'
                              backendAzureRmContainerName: 'swathi-tfstate-asgmt'
                              backendAzureRmKey: 'terraform.tfstate'
                    - task: TerraformTaskV3@3
                      inputs:
                           provider: 'azurerm'
                           command: 'plan'
                           commandOptions: '--var-file="$(System.DefaultWorkingDirectory)/parameter.json"'
                           environmentServiceNameAzureRM: 'az-asgmts'
                    - task: TerraformTaskV3@3
                      inputs:
                             provider: 'azurerm'
                             command: 'apply'
                             commandOptions: '--var-file="$(System.DefaultWorkingDirectory)/parameter.json"'
                             environmentServiceNameAzureRM: 'az-asgmts'
                    - task: TerraformTaskV3@3
                      inputs:
                        provider: 'azurerm'
                        command: 'destroy'
                        commandOptions: '--var-file="$(System.DefaultWorkingDirectory)/parameter.json"'
                        environmentServiceNameAzureRM: 'az-asgmts'

  

