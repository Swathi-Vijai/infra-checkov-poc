# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
trigger: 
 branches:
    include:
      - main


pool:
  vmImage: ubuntu-latest


stages:
  - stage: checkov
    jobs:
        - job: compliance
          displayName: 'Run checkov for compliance'
          pool:
            vmImage: 'ubuntu-latest'

          steps:
           # task to install checkov 
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: 'pip3 install checkov'
            
            
            - task: Bash@3
              displayName: 'Checkov Static Code Analysis'
              inputs:
                targetType: 'inline'
                # checkov command to display errors in 3 places- (json format-github pr comment), (xml format-azure pipeline test plans) and command without output format to display in pipeline runs
                script: |
                  checkov --directory ./ --hard-fail-on MEDIUM  --output junitxml > $(System.DefaultWorkingDirectory)/checkov-report.xml
                  
              continueOnError: true

            
            - task: PublishTestResults@2
              displayName: 'Publish checkov Test Results'
              condition: succeededOrFailed()
              inputs:
                testResultsFormat: 'JUnit'
                testResultsFiles: 'checkov-report.xml'
                searchFolder: '$(System.DefaultWorkingDirectory)'
            
            - task: PythonScript@0
              inputs:
                scriptSource: 'inline'
                script: |
                  f = open("test.txt", "a")
                  import requests
                  from bs4 import BeautifulSoup
                  import xml.etree.ElementTree as ET
                  tree= ET.parse('checkov-report.xml')
                  root=tree.getroot()
                  for child in root:
                    c=0
                    fi=0
                    di=child.attrib
                    f.write(str(di))
                    f.write('\n')
                    for i in range (1,len(child)):
                      
                      if(len(child[i]))==0:
                        c=c+1
                        if(c==1):
                           print('passed checks:')
                           f.write('PASSED CHECKS:')
                           f.write('\n')

                        d=child[i].attrib
                        s=d['name']
                        print(s[6:500])
                        f.write(s[6:500])
                        f.write('\n')

                      else:
                        fi=fi+1
                        if(fi==1):
                           print('failed checks:') 
                           f.write('\n')
                           f.write('FAILED CHECKS:')
                           f.write('\n')

                        s=child[i][0].text
                        l=s.split('\n')
                        for x in l:
                            if 'Guideline' in x:
                                
                                u=(x[10:1000])
                                break
                        r = requests.get(u)
                        soup = BeautifulSoup(r.content, 'html.parser')

                        s = soup.find('div', class_='excerpt')
                        
                        lines = s.find_all('p')
                        st=''
                        for line in lines:
                          st=st+(line.text)
                        l=st.split('\n')
                        for x in l:
                            if 'Severity' in x:
                                print(x[10:1000])
                                f.write(x[10:1000])

                        d=child[i].attrib
                        s=d['name']
                        print(s[6:500])
                        f.write(s[6:500])
                        f.write('\n')
          
            - task: PublishBuildArtifacts@1
              inputs:
                pathtoPublish: $(System.DefaultWorkingDirectory)/test.txt
                artifactName: Checkov-Report